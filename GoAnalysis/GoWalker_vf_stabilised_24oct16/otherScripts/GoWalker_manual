######################################################################################################################
############# GO-TERMS ENRICHMENT
######################################################################################################################

#######################################################
#GENERAL SETTINGS
#######################################################

#Ask for load working directory if necessary
#setwd(scan(what=""))

#Load GOdb 
library(GO.db)

#Raise number of printable strings
options(max.print=99999999)

#Ask for SNPtoGO.py output filename
print("Filename of whole dataset terms (format extension included),then press enter as time as its necessary")
fichier_go=scan(what="")

print("Filename of sample dataset terms (format extension included),then press enter as time as its necessary")
fichier_go_ech =scan(what="")

#Load SNPtoGO.py output 
go_file=readLines(fichier_go)
go_ech_file=readLines(fichier_go_ech)

#####################################################################
#GO-TERMS WALKING
#####################################################################

##Retrieve all ancestor GO-terms of the GO-term three for each GO-ID's and categorise them by one file per aspect(CC,BP,MF)

################### ASPECT 1: CC ################################

#UNIVERSE
capture.output(for(i in 1:length(go_file))
{
  aspect=1
  truc=0
  #Try, in order to avoid errors if GO-term is not a CC or dont have any ancestors
  try(print(aspect<-get(go_file[i],GOCCANCESTOR)),TRUE)
  options(warn=-1) #This test is valid but generate msgerr, so, turn-off msgerr
  if(aspect!=1) #if aspect!=1 aspect is an GOCC
  {
    print(go_file[i]) #print first GO-term if is its a CC
  }
  options(warn=0) # test ok, turn-on msgerr
},file=("gocc_univ.txt"))

#Open file and keep GO terms only (update file and erase old version)
data=scan("gocc_univ.txt",what="character"())#opened with fonction scan (+as character) in order to grep efficiently with go_only

#Special function in order to dont show columns and row names during the writing of the output file
print.go_only <- function(m)
{
  write.table(format(m, justify="right"),
              row.names=F, col.names=F, quote=F)
}


#Save results which only contains GO Id's
capture.output(print.go_only(grep(pattern ="GO:" , data, value = TRUE, fixed = TRUE)),file=("gocc_univ.txt"))

#SAMPLE
capture.output(for(i in 1:length(go_ech_file))
{
  #Try, in order to avoid errors if GO-term is not a CC or dont have any ancestors
  aspect=1
  truc=0
  #Try, in order to avoid errors if GO-term is not a CC or dont have any ancestors
  try(print(aspect<-get(go_ech_file[i],GOCCANCESTOR)),TRUE)
  options(warn=-1)
  if(aspect!=1) #if aspect!=1 aspect is an GOCC
  {
    print(go_ech_file[i]) #print first GO-term if is its a CC
  }
  options(warn=0)
},file=("gocc_ech.txt"))

#Open file and keep GO terms only (update file and erase old version)
data=scan("gocc_ech.txt",what="character"())#opened with fonction scan (+as character) in order to grep efficiently with go_only

#Save results which only contains GO Id's
capture.output(print.go_only(grep(pattern ="GO:" , data, value = TRUE, fixed = TRUE)),file=("gocc_ech.txt"))

################### ASPECT 2: BP ################################

#UNIVERSE
capture.output(for(i in 1:length(go_file))
{
  aspect=1
  truc=0
  #Try, in order to avoid errors if GO-term is not a CC or dont have any ancestors
  try(print(aspect<-get(go_file[i],GOBPANCESTOR)),TRUE)
  options(warn=-1)
  if(aspect!=1) #if aspect!=1 aspect is an GOCC
  {
    print(go_file[i]) #print first GO-term if is its a CC
  }
  options(warn=0)
},file=("gobp_univ.txt"))

#Open file and keep GO terms only (update file and erase old version)
data=scan("gobp_univ.txt",what="character"()) 
capture.output(print.go_only(grep(pattern = "GO:" , data, value = TRUE, fixed = TRUE)),file=("gobp_univ.txt"))

#SAMPLE
capture.output(for(i in 1:length(go_ech_file))
{
  #Try, in order to avoid errors if GO-term is not a CC or dont have any ancestors
  aspect=1
  truc=0
  #Try, in order to avoid errors if GO-term is not a CC or dont have any ancestors
  try(print(aspect<-get(go_ech_file[i],GOBPANCESTOR)),TRUE)
  options(warn=-1)
  if(aspect!=1) #if aspect!=1 aspect is an GOCC
  {
    print(go_ech_file[i]) #print first GO-term if is its a CC
  }
  options(warn=0)
},file=("gobp_ech.txt"))

#Open file and keep GO terms only (update file and erase old version)
data=scan("gobp_ech.txt",what="character"())#opened with fonction scan (+as character) in order to grep efficiently with go_only
#Save results which only contains GO Id's
capture.output(print.go_only(grep(pattern ="GO:" , data, value = TRUE, fixed = TRUE)),file=("gobp_ech.txt"))


################### ASPECT 3: MF ################################

#UNIVERSE
capture.output(for(i in 1:length(go_file))
{
  #Try, in order to avoid errors if GOterm is not a MF or dont have any ancestors
  aspect=1
  truc=0
  #Try, in order to avoid errors if GO-term is not a CC or dont have any ancestors
  try(print(aspect<-get(go_file[i],GOMFANCESTOR)),TRUE)
  options(warn=-1)
  if(aspect!=1) #if aspect!=1 aspect is an GOCC
  {
    print(go_file[i]) #print first GO-term if is its a CC
  }
  options(warn=0)
},file=("gomf_univ.txt"))

#Open file and keep GO terms only (update file and erase old version)
data=scan("gomf_univ.txt",what="character"())
capture.output(print.go_only(grep(pattern = "GO:" , data, value = TRUE, fixed = TRUE)),file=("gomf_univ.txt"))

#SAMPLE
capture.output(for(i in 1:length(go_ech_file))
{
  #Try, in order to avoid errors if GO-term is not a CC or dont have any ancestors
  aspect=1
  truc=0
  #Try, in order to avoid errors if GO-term is not a CC or dont have any ancestors
  try(print(aspect<-get(go_ech_file[i],GOMFANCESTOR)),TRUE)
  options(warn=-1)
  if(aspect!=1) #if aspect!=1 aspect is an GOCC
  {
    print(go_ech_file[i]) #print first GO-term if is its a CC
  }
  options(warn=0)
},file=("gomf_ech.txt"))

#Open file and keep GO terms only (update file and erase old version)
data=scan("gomf_ech.txt",what="character"())#opened with fonction scan (+as character) in order to grep efficiently with go_only
#Save results which only contains GO Id's
capture.output(print.go_only(grep(pattern ="GO:" , data, value = TRUE, fixed = TRUE)),file=("gomf_ech.txt"))

######################################################################################################################
############# GO-THREE WALKING AND RELATED STATISTICAL TESTS 
######################################################################################################################

############################################
#TEST HYPERGEOMETRIQUE
############################################
#Load godb
library(GO.db)
#phyper(a,b,c,d,lower.tail = TRUE)
#AVEC
#a : nombre de fois ou le GO-terme testé est retrouvé dans l'échantillon
#b : nombre de fois ou le GO-terme testé est retrouvé dans l'univers
#c : nombre de GO-termes constituant l'univers
#d : nombre de GO-termes constituant l'échantillon
#H0: le go-terme est sur-représenté et ce n'est pas du au hasard (accepté avec un seuil de x% , pvalue<0.05)
#H1: le go-terme n'est pas sur représenté
#Lower.tail = TRUE : inverse les hypothèses HO et H1.
#########################################################
#INITIALIZE VALUES FOR UNIVERSE AND DATASETS 
#########################################################
univers_mf=read.table("gomf_univ.txt")
echantillon_mf=read.table("gomf_ech.txt")

univers_cc=read.table("gocc_univ.txt")
echantillon_cc=read.table("gocc_ech.txt")

univers_bp=read.table("gobp_univ.txt")
echantillon_bp=read.table("gobp_ech.txt")
#######################################################
#Special function in order to do not keep undesired characters
onlythis<- function(m)
{
  write.table(format(m, justify="right"),
              row.names=F, col.names=F, quote=F)
}
########################################################
#R SETTINGS AND SOME VALUES SETTINGS
########################################################

Go_univ=univers_mf #Universe
Go_ech=echantillon_mf #Node
options(max.print=99999999) #Raise print capacity
Go_uniq=Go_univ[!duplicated(Go_univ),] #Go_uniq used for loop in order to dont retrieve a goterm multiple times if its duplicated
parent="all" #Root node can be considered as "all" in Go.db
#########################################################
#COMPUTING AND WRITE RESULTS IN FILE FOR EACH ASPECT
#########################################################

#################### MOLECULAR FUNCTION #################

#Bro-tip: parameters allready set for MF analysis (see behind. But CC and BP need to resetting parameters)

#####PHYPER TEST PLUS BONFERRONI CORRECTION#####
pvals=""
for(i in 1:length(Go_uniq))
{
  targeted_goterm=toString(Go_uniq[i]) #tostring in order to request value
  #Bro-tip= lower.tail=TRUE because (lower.tail=TRUE)=FALSE in next loop, for obscure reasons
  pvals[i]<-phyper(length(which(Go_ech==targeted_goterm)),length(which(Go_univ==targeted_goterm)),length(Go_univ[,1]),length(Go_ech[,1]),lower.tail = FALSE) 
}
pvals2<-as.vector(pvals)
pvals_adjusted<-p.adjust(pvals2, method="bonferroni", n=length(Go_uniq))
a=1

######PHYPER OK, NOW ENHANCE PHYPER RESULTS#####
capture.output(
  #FILE Header
  cat("GO:ID","Go term","Number of hits","Expected number of hits","Go level","P-value","Corrected p-value","Aspect",sep=";"),
  cat("\n"),
  
  for(i in 1:length(Go_uniq))
  {
    targeted_goterm=toString(Go_uniq[i]) #tostring in order to request value
    #Targeted_goterm: GOterm currently processed##Number of hits##Expected number of hits##phyper(count of this GO in the batch,count of this go in the universe, universe length,batch length)
    #With:number of hits: count of this goterm in the batch
    #expected number of hits: count of the same goterm in the universe
    expectednumberofhits=(((length(which(Go_univ==targeted_goterm)))/(length(Go_univ[,1])))*length(Go_ech[,1]))
    trm=Term(targeted_goterm)
    ##########################################################################
    #RETRIEVE GO-TERM LEVEL : by parents "walking" method (is-a , part-of)
    ##########################################################################
    #First request
    parents=get(targeted_goterm,GOMFPARENTS) 
    #If parents founded-->next DAG level exists.So repeat request with the parents of the next DAG level
    if(parents[1]!=parent)
    {
      level=1 #level in the DAG
      tryCatch({
        for(i in 1:1000) #Arbitrary.
        {
          parents=get(parents[1],GOMFPARENTS) #[1] because prioritize for "is-a"
          level=level+1
          if(parents[1]==parent) stop()#If node ="all" , all go three processed,no more DAG levels.Stop the requests loop
        }
      }, error=function(e){cat()})#Nothing in message error in order to dont print msgerros in results file
    }
    #If no parents founded-->term is on highest level. This is Aspect term-->lvl
    else
    {
      level=1
    }
    #Print results foreach go-term
    col3=as.character(length(which(Go_ech==targeted_goterm)))
    col6=as.character(phyper(length(which(Go_ech==targeted_goterm)),length(which(Go_univ==targeted_goterm)),length(Go_univ[,1]),length(Go_ech[,1]),lower.tail = FALSE))
    cat(targeted_goterm,trm,col3,expectednumberofhits,level,col6,pvals_adjusted[a],"MF",sep=";")
    cat("\n")
    a=a+1
  }
  ,file="hyperesults_mf.txt")

#################### CELLULAR COMPOPENT #################

Go_univ=univers_cc
Go_ech=echantillon_cc
Go_uniq=Go_univ[!duplicated(Go_univ),]

#####PHYPER TEST PLUS BONFERRONI CORRECTION#####
pvals=""
for(i in 1:length(Go_uniq))
{
  targeted_goterm=toString(Go_uniq[i]) #tostring in order to request value
  #Bro-tip= lower.tail=TRUE because (lower.tail=TRUE)=FALSE in next loop, for obscure reasons
  pvals[i]<-phyper(length(which(Go_ech==targeted_goterm)),length(which(Go_univ==targeted_goterm)),length(Go_univ[,1]),length(Go_ech[,1]),lower.tail = FALSE) 
}
pvals2<-as.vector(pvals)
pvals_adjusted<-p.adjust(pvals2, method="bonferroni", n=length(Go_uniq))
a=1
######PHYPER OK, NOW ENHANCE PHYPER RESULTS#####
capture.output(
  
  for(i in 1:length(Go_uniq))
  {
    targeted_goterm=toString(Go_uniq[i]) #tostring in order to request value
    #Targeted_goterm: GOterm currently processed##Number of hits##Expected number of hits##phyper(count of this GO in the batch,count of this go in the universe, universe length,batch length)
    #With:number of hits: count of this goterm in the batch
    #expected number of hits: count of the same goterm in the universe
    expectednumberofhits=(((length(which(Go_univ==targeted_goterm)))/(length(Go_univ[,1])))*length(Go_ech[,1]))
    trm=Term(targeted_goterm)
    ##########################################################################
    #RETRIEVE GO-TERM LEVEL : by parents "walking" method (is-a , part-of)
    ##########################################################################
    #First request
    parents=get(targeted_goterm,GOCCPARENTS) 
    #If parents founded-->next DAG level exists.So repeat request with the parents of the next DAG level
    if(parents[1]!=parent)
    {
      level=1 #level in the DAG
      tryCatch({
        for(i in 1:1000) #Arbitrary.
        {
          parents=get(parents[1],GOCCPARENTS) #[1] because prioritize for "is-a"
          level=level+1
          if(parents[1]==parent) stop()#If node ="all" , all go three processed,no more DAG levels.Stop the requests loop
        }
      }, error=function(e){cat()})#Nothing in message error in order to dont print msgerros in results file
    }
    #If no parents founded-->term is on highest level. This is Aspect term-->lvl
    else
    {
      level=1
    }
    #Print results foreach go-term
    col3=as.character(length(which(Go_ech==targeted_goterm)))
    col6=as.character(phyper(length(which(Go_ech==targeted_goterm)),length(which(Go_univ==targeted_goterm)),length(Go_univ[,1]),length(Go_ech[,1]),lower.tail = FALSE))
    cat(targeted_goterm,trm,col3,expectednumberofhits,level,col6,pvals_adjusted[a],"CC",sep=";")
    cat("\n")
    rm(targeted_goterm)
    a=a+1
  }
  ,file="hyperesults_cc.txt")

#################### BIOLOGICAL PROCESS #################

Go_univ=univers_bp
Go_ech=echantillon_bp
Go_uniq=Go_univ[!duplicated(Go_univ),]

#####PHYPER TEST PLUS BONFERRONI CORRECTION#####
pvals=""
for(i in 1:length(Go_uniq))
{
  targeted_goterm=toString(Go_uniq[i]) #tostring in order to request value
  #Bro-tip= lower.tail=TRUE because (lower.tail=TRUE)=FALSE in next loop, for obscure reasons
  pvals[i]<-phyper(length(which(Go_ech==targeted_goterm)),length(which(Go_univ==targeted_goterm)),length(Go_univ[,1]),length(Go_ech[,1]),lower.tail = FALSE) 
}
pvals2<-as.vector(pvals)
pvals_adjusted<-p.adjust(pvals2, method="bonferroni", n=length(Go_uniq))
a=1

######PHYPER OK, NOW ENHANCE PHYPER RESULTS#####
capture.output(
 
  for(i in 1:length(Go_uniq))
  {
    targeted_goterm=toString(Go_uniq[i]) #tostring in order to request value
    #Targeted_goterm: GOterm currently processed##Number of hits##Expected number of hits##phyper(count of this GO in the batch,count of this go in the universe, universe length,batch length)
    #With:number of hits: count of this goterm in the batch
    #expected number of hits: count of the same goterm in the universe
    expectednumberofhits=(((length(which(Go_univ==targeted_goterm)))/(length(Go_univ[,1])))*length(Go_ech[,1]))
    trm=Term(targeted_goterm)
    ##########################################################################
    #RETRIEVE GO-TERM LEVEL : by parents "walking" method (is-a , part-of)
    ##########################################################################
    #First request
    parents=get(targeted_goterm,GOBPPARENTS) 
    #If parents founded-->next DAG level exists.So repeat request with the parents of the next DAG level
    if(parents[1]!=parent)
    {
      level=1 #level in the DAG
      tryCatch({
        for(i in 1:1000) #Arbitrary.
        {
          parents=get(parents[1],GOBPPARENTS) #[1] because prioritize for "is-a"
          level=level+1
          if(parents[1]==parent) stop()#If node ="all" , all go three processed,no more DAG levels.Stop the requests loop
        }
      }, error=function(e){cat()})#Nothing in message error in order to dont print msgerros in results file
    }
    #If no parents founded-->term is on highest level. This is Aspect term-->lvl
    else
    {
      level=1
    }
    #Print results foreach go-term
    col3=as.character(length(which(Go_ech==targeted_goterm)))
    col6=as.character(phyper(length(which(Go_ech==targeted_goterm)),length(which(Go_univ==targeted_goterm)),length(Go_univ[,1]),length(Go_ech[,1]),lower.tail = FALSE))
    cat(targeted_goterm,trm,col3,expectednumberofhits,level,col6,pvals_adjusted[a],"BP",sep=";")
    cat("\n")
    rm(targeted_goterm)
    a=a+1
  }
  ,file="hyperesults_bp.txt")
#processing clean output 
system("paste -d'\n' hyperesults_mf.txt hyperesults_cc.txt hyperesults_bp.txt > GoWalkeresults/hyperesults_alltmp.txt")
system("sed '/^\\s*$/d' GoWalkeresults/hyperesults_alltmp.txt > GoWalkeresults/hyperesults_all.txt")
system("rm hyperesults_mf.txt hyperesults_cc.txt hyperesults_bp.txt gocc_univ.txt gocc_ech.txt gomf_univ.txt gomf_ech.txt gobp_univ.txt gobp_ech.txt GoWalkeresults/hyperesults_alltmp.txt")
