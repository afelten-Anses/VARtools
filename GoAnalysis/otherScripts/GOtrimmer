#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import print_function, division
import json
from collections import defaultdict
import argparse       #arguments parser

__doc__="""
GOtrimmer script. In order to keep prokaryotic terms only in VCFtoGO universe output file, based on GOslim (GO-basic.obo)
@requires: VCFtoGO output file (GO-terms universe)
@requires: GO-basic.obo file (GOslim)
"""



###################################################################################
##GOtrimmer #### inspired from: http://stackoverflow.com/q/32989776/4014959
###################################################################################
##
#GOAL: delete obsolete and non-prokaryotic GO-terms From VCFtoGO output file
def get_parser():
    """
    Arguments setting and parsing
    @return: arguments list
    @rtype: parser object
    """

    parser = argparse.ArgumentParser(description='vcf file and/or vcf positions and output settings')


    parser.add_argument('-i', action="store", dest='input', 
                        type=str, required=True, help='vcf file')

    return parser


#################################################################
#add id in object only if subset=go_subset_prok
#################################################################

def add_object(d): 
    """
    collect prokaryotic terms in GO-basic.obo
    @param d : go-term related data collected from GO-basic.obo
    @type d : object data
    """
    #Ignore obsolete objects
    if "is_obsolete" in d:
        return

    #Gather desired data into a single list,
    # and store it in the main all_objects dict
    key = d["id"][0]
    is_a = d["subset"]
    if not "gosubset_prok" in is_a:
        is_a=""
    else: 
        output.write(key+str("\n"))

    #Remove the next line if you want to keep the is_a description info
    is_a = [s.partition(' ! ')[0] for s in is_a]
    all_objects[key] = d["subset: gosubset_prok"] + is_a

def main():
    parser=get_parser()
    Arguments=parser.parse_args()


    fname = "go-basic.obo"
    term_head = "[Term]"

    #Keep the desired object data here
    all_objects = {}
    output=open("goprok.txt","w")
    outputuniv=open("univers.txt","w")
    gofull=Arguments.input

    #A temporary dict to hold object data
    current = defaultdict(list)

    with open(fname) as f:
        #Skip header data
        for line in f:
            if line.rstrip() == term_head:
                break

        for line in f:
            line = line.rstrip()
            if not line:
                #ignore blank lines
                continue
            if line == term_head:
                #end of term
                add_object(current)
                current = defaultdict(list)
            else:
                #accumulate object data into current
                key, _, val = line.partition(": ")
                current[key].append(val)

    if current:
        add_object(current)    
    #################################################################
    #Compare the outputs and keep proka go-terms only in a new output
    #################################################################

    with open(gofull) as termsuniv:
        for termuniv in termsuniv:
            with open("goprok.txt") as termsprok:
                if termuniv in termsprok.readlines():
                    outputuniv.write(termuniv)
