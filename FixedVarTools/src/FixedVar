#!/usr/bin/python
# -*- coding: iso-8859-1 -*-
import argparse
import os, sys, time
from itertools import chain
from lxml import etree

__doc__="""
Extract all fixed variants of a group of genomes compared to an other group from a VCF annotated file. 

Inputs are :
	- a VCF file previously annotated by SnpEff
	- a file with genomes name to analyse, one name per line
	- a file with genomes name to use for the comparison, one name per line 
	- a prefix for the XML output file 

Outputs are :
	- a XML file with all fixed variants and its annotations for each node and each combination. 
	- a newick file similar to the input newick file with the node label (node id and combinations id).

@version: 1.0
@author: Arnaud Felten
@organization : ANSES
"""

def get_parser():
	"""
	Parse arguments
	@return: arguments list
	@rtype: parser object
	"""

	parser = argparse.ArgumentParser(description='compute sequence length')
	
	parser.add_argument('-i', action="store", dest='VCF', 
						type=str, required=True, help='VCF file (REQUIRED)')

	parser.add_argument('-a', action="store", dest='GENOMES', 
						type=str, required=True, help='file with names of genomes of interest, one name per line (REQUIRED)')

	parser.add_argument('-b', action="store", dest='COMPARE', 
						type=str, required=True, help='file with names of compared genomes, one name per line (REQUIRED)')

	parser.add_argument('-o', action="store", dest='OUTPUT', 
						type=str, default='output', help='output Prefix (default:output)')

	return parser


class var(object) :
	"""
	Create var object to stock variant information
	@param type : type of mutation ('SNP' or 'INDEL') 
	@type type : string
	@param pos : variant position regarding the reference genome 
	@type pos : integer
	@param var : nucleic variation 
	@type var : string
	@param homoplasy : homoplasic variant ('Yes' or 'No') 
	@type homoplasy : string
	@param region : type of genetic region ('intergenic' or 'intragenic')
	@type region : string
	@param impact : variant impact
	@type impact : string
	@param geneID : for a intragenic region, the gene ID impacted by the variant
	@type geneID : string
	@@param geneName : for a intragenic region, the gene name impacted by the variant
	@type geneName : string
	@param transcritID : for a intragenic region, the transcrit ID impacted by the variant
	@type transcritID : string	
	"""

	def __init__(self):
		"""
		Initialize the var class
		"""
		self.type = ""
		self.pos = 0
		self.var = "N"
		self.homoplasy = ""
		self.region = ""
		self.impact = ""
		self.geneID = ""
		self.geneName = ""
		self.transcritID = ""

	def setType(self, type):
		"""
		Set the type of mutation ('SNP' or 'INDEL')
		@param type : type of mutation ('SNP' or 'INDEL') 
		@type type : string
		"""
		self.type = type

	def setPos(self, pos):
		"""
		Set the variant position regarding the reference genome 
		@param pos : variant position regarding the reference genome 
		@type pos : integer
		"""
		self.pos = pos		

	def setVar(self, var):
		"""
		Set the nucleic variation
		@param var : nucleic variation 
		@type var : string
		"""
		self.var = var	

	def setHomoplasy(self, homo):
		"""
		Set if the variant is homoplasic or not ('Yes' or 'No')
		@param homo : homoplasic variant ('Yes' or 'No') 
		@type homo : string
		"""
		self.homoplasy = homo	

	def setRegion(self, reg):
		"""
		Set the type of genetic region ('intergenic' or 'intragenic')
		@param reg : type of genetic region ('intergenic' or 'intragenic')
		@type reg : string
		"""
		self.region = reg

	def setImpact(self, imp):
		"""
		Set the genetic impact of the variant
		@param imp : variant impact
		@type imp : string
		"""
		self.impact = imp	

	def setGeneID(self, id):
		"""
		Set the gene ID impacted by the variant
		@param id : gene ID impacted by the variant
		@type id : string
		"""
		self.geneID = id		

	def setGeneName(self, name):
		"""
		Set the gene name impacted by the variant
		@param name : gene name impacted by the variant
		@type name : string
		"""
		self.geneName = name		

	def setTranscritID(self, transcritID):
		"""
		Set the transcrit ID impacted by the variant
		@param transcritID :  transcrit ID impacted by the variant
		@type transcritID : string
		"""
		self.transcritID = transcritID	


class genome(object) :
	"""
	Create genome object to stock all of its variants informations
	@param name : name of the genome
	@type name : string
	@param variants : list of var objects assigned to the genome 
	@type variants : list
	"""
	def __init__(self):
		"""
		Initialize the genome class
		"""
		self.name = ""
		self.variants = []

	def setName(self, name):
		"""
		Set the name of the genome
		@param name : name of the genome
		@type name : string
		"""
		self.name = name.split('/')[-1]

	def setVar(self, variants):
		"""
		Set a list of var objects assigned to the genome
		@param variants : list of var objects assigned to the genome 
		@type variants : list
		"""
		self.variants = variants

	def addVariant(self, variant):
		"""
		Add a new var object in the genome variants list
		@param variants : list of var objects assigned to the genome 
		@type variants : list
		"""
		self.variants.append(variant)	


def printObjNucl(objetNucl):
	"""
	Debug fonction, print all attributes of var object
	@param objetNucl : object var to print
	@type objetNucl : var object
	"""

	print "Type : " + objetNucl.type
	print "Position : " + str(objetNucl.pos)
	print "Variant : " + objetNucl.var
	print "Region : " + objetNucl.region
	if objetNucl.region == "intragenic" :
		print "Impact : " + objetNucl.impact
		print "Gene id : " + objetNucl.geneID
		print "Gene name : " + objetNucl.geneName
		print "Transcrit id : " + objetNucl.transcritID


def addANN(objetNucl, annotation):
	'''
	Add annotation informations to a var object
	@param objetNucl : var object to complete
	@type objetNucl : var object 
	@param annotation : for one line in a VCF file, the info column
	@type annotation : string
	'''

	# select the annotation informations adding by SNPEff
	for element in annotation.split(";") :
		if "ANN=" in element :
			annotation = element.split("|")
			break

	# if variant in a intergenic region, no additional informations		
	if "intergenic_region" in annotation[1] :
		objetNucl.setRegion("intergenic")

	# else, add impact, gene name and id, and transcrit id informations	
	else:
		objetNucl.setRegion("intragenic")	
		objetNucl.setImpact(annotation[1])
		objetNucl.setGeneName(annotation[3])
		objetNucl.setGeneID(annotation[4])
		objetNucl.setTranscritID(annotation[6])


def readVCFfile(file, listeGenomeName):
	'''
	Read a VCF file and make a list constituted by genome objects from genome in the VCF 
	@param file : VCF file 
	@type listeGenomeName : list of genomes name not to extract
	@param listeGenomeName : list
	@type file : file
	@return: list of genome objects
	@rtype: list
	'''

	vcf = open(file,'rb')
	lines = vcf.readlines()

	# flag variable
	firstLine = True

	listeGenomePostion = []
	listeGenome = []

	# variable to check the shift 
	pos = ""

	for line in lines :

		# create a liste from the line, one column is one element of the list
		line = line.split('\t')

		# don't process header lines
		if("##" not in line[0]):

			if firstLine :
				# line with columns name

				# Find genomes name
				i = 0
				for g in line[9:] :
					g = g.rstrip().split('/')[-1] 
					# keep only genomes of interest
					if g in listeGenomeName :
						Genome = genome()
						Genome.setName(g)
						listeGenomePostion.append(i)
						listeGenome.append(Genome)
					i+=1	

				firstLine = False
			
			# tab line	
			else :
			
				# avoid 2 lines with the same position (SNP & INDEL).
				# Normally delete with the VCF filter script
				if pos != line[1] :
					pos = line[1]	

					variant = []
					variant.append(line[3])
					variantModif = []	

					# avoid lines with no information for alternative allele
					# Normally delete with the VCF filter script
					if(line[4] != '.'):

						# make a list with one alternative allele per element
						variantModif.append(line[4].split(','))
						variantModif = list(chain.from_iterable(variantModif))
						variant = variant + variantModif	

						if "VARTYPE=SNP" in line[7]:
							vartype = "SNP"
						else :
							vartype = "INDEL"

						# avoid lines with no information for at least one genome
						# Normally delete with the VCF filter script
						flag = True
						for g in line[9:] :
							vari = g.split(':')[0]
							if('.' in vari):
								flag = False
								break
						if flag :		

							# make a new var object and associate it with genome object	
							i = 0	
							j = 0
							for g in line[9:] :
								vari = g.split(':')[0]
								if('.' not in vari) and (i in listeGenomePostion):
									vari = int(vari) # match to the correct reference or alternative allele 
									newVariant = var()
									newVariant.setType(vartype)
									newVariant.setPos(int(line[1]))
									newVariant.setVar(variant[vari])
									addANN(newVariant, line[7])
									listeGenome[j].addVariant(newVariant)
									#printObjNucl(newVariant) # Debug
									j+=1
								i+=1		

	return listeGenome


def selectPosSensible(listeGenomes):
	'''
	Select all position which all genome from a list have the same allele.
	Not necessary for only one genome.
	@param listeGenomes : list of genome objects
	@type listeGenomes : list
	@return: dictionnary with the position as key and the nucleic allele for value
	@rtype: dictionnary
	'''

	dicoVariants = {} # dictionnary of all alleles of genomes
	dicoPosSensible = {} # only commun allele

	# create a dictionnary of all alleles of genomes with position as key and
	# the list of allele for each genome as value
	for Genome in listeGenomes :

		for variant in Genome.variants :

			if variant.pos in dicoVariants :
				dicoVariants[variant.pos].append(variant.var)
			else :
				dicoVariants[variant.pos] = []
				dicoVariants[variant.pos].append(variant.var)

	# select commun alleles			
	for pos in dicoVariants :
		# check if all genomes have a allele for this position
		if len(dicoVariants[pos]) == len(listeGenomes) :
			n = dicoVariants[pos][0]
			flag = True
			# check if all alleles are the same
			for var in dicoVariants[pos][1:]:
				if var != n :
					flag = False
					break
			if flag :
				dicoPosSensible[pos] = n		

	return dicoPosSensible
	

def genomeName_to_genomeObjet(GenomesNames, GenomesObjet):
	'''
	From a list of genomes name, this fuction find the genome objects associated to its name.
	@param GenomesNames : list of genome names
	@type GenomesNames : list
	@param GenomesObjet : list of genome objects
	@type GenomesObjet : list
	@return: list of genome objects associated to the genome names of the GenomesNames list
	@rtype: list
	'''

	listeObjets = []
		
	for GenomeName in GenomesNames :
		for GenomeObjet in GenomesObjet :
			if GenomeName == GenomeObjet.name :
				listeObjets.append(GenomeObjet)
				break

	return listeObjets					


def createDicoPos(listeGenomesObjets):
	'''
	Make a dictionnary with all variants position and the all the different alleles associated
	@param listeGenomesObjets : list of genome objects
	@type listeGenomesObjets : list
	@return: dictionnary with position as key and the list of the different alleles at this position for value
	@rtype: dictionnary
	'''	

	dicoPos = {}

	for objet in listeGenomesObjets :
		for variant in objet.variants :

			# if the position don't existe in dictionnary, make a new entry
			if(variant.pos not in dicoPos):
				dicoPos[variant.pos] = []
				dicoPos[variant.pos].append(variant.var)	

			# else check if the allele already exists, add it if not	
			else :
				flag = True
				for element in dicoPos[variant.pos] :
					if element == variant.var :
						flag = False
						break
				if flag :
					dicoPos[variant.pos].append(variant.var)		

	return dicoPos	


def selectPosSpecifique(dicoPosSensible, listeGenomesObjets):
	'''
	Select the alleles existing in the dictionnary and not present for the genomes of the list (specificity filter)
	@param dicoPosSensible : dictionnary with positions as key and the allele corresponding as value
	@type dicoPosSensible : dictionnary
	@param listeGenomesObjets : list of genome objects
	@type listeGenomesObjets : list
	@return: dictionnary with position specifique as key and the allele corresponding as value
	@rtype: dictionnary
	'''	
	
	# make a dictionnary of all variants of all genomes from the list				
	dicoPosGenomes = createDicoPos(listeGenomesObjets)

	dicoSpecifique = {}
	
	for pos in dicoPosSensible :
		# check if the position exist in the both dictionnary
		if pos in dicoPosGenomes :
			var_to_compare = dicoPosGenomes[pos]
			# check if the allele isn't present in the dicoPosGenomes dictionnary
			if ''.join(dicoPosSensible[pos]) not in dicoPosGenomes[pos] : 
				dicoSpecifique[pos] = dicoPosSensible[pos]

	return 	dicoSpecifique		


def fileToList(inputFile):
	'''
	Extract genomes name from a file with 1 name per line
	@param inputFile : input file name
	@type inputFile : string
	@return: list of genomes name
	@rtype: list
	'''	

	listFile = open(inputFile, 'r')
	genomeList = []
	lines = listFile.readlines()
	for line in lines :
		genomeList.append(line.rstrip())

	return genomeList	


def makeXML(GenomesObjet, genome_to_process, genome_to_compare):
	'''
	Make a XML objet from a the comparaison groups list and the lists of genomes to analyse and genomes to compare
	@param GenomesObjet : list of genome objects
	@type GenomesObjet : list
	@param genome_to_process : genomes name to analyse
	@type genome_to_process : list
	@param genome_to_compare : genomes name to use for the comparison
	@type genome_to_compare : list
	@return: root of the XML tree
	@rtype: etree
	'''

	root = etree.Element("root")
	numNode = 1
	flag = True

	# make a 'NODE' entry for all 2 combination
	if flag :
		node = etree.SubElement(root, "NODE")
		node.set("value", str(numNode))
		flag = False

	else :
		flag = True
		numNode += 1	

	# combination number	
	comparaison = etree.SubElement(node, "COMPARISON")	
	comparaison.set("value", str(1))

	# new entry with all genomes name to analyse
	genomesToAnalyse = etree.SubElement(comparaison, "GENOMES_TO_ANALYSE")
	for genome in genome_to_process :
		g = etree.SubElement(genomesToAnalyse, "GENOME")
		g.text = genome	

	# new entry with all genomes name to compare	
	genomesCousins = etree.SubElement(comparaison, "GENOMES_COUSINS")
	for genome in genome_to_compare :
		g = etree.SubElement(genomesCousins, "GENOME")
		g.text = genome	

	# recovers the specific and sensitive position dictionnary compared to cousins genome
	listeObjets = genomeName_to_genomeObjet(genome_to_process, GenomesObjet)

	if(len(genome_to_process) > 1) :
		dicoPosSensible = selectPosSensible(listeObjets)
	else :
		dicoPosSensible = createDicoPos(listeObjets)	

	listeObjets_to_compare = genomeName_to_genomeObjet(genome_to_compare, GenomesObjet)	

	dicoSpecifique = selectPosSpecifique(dicoPosSensible, listeObjets_to_compare)
	
	# make a dictionnary without homoplasy
	listeObjets_to_compare = genomeName_to_genomeObjet(genome_to_compare, GenomesObjet)
	dicoSpecifique_vsALL = selectPosSpecifique(dicoPosSensible, listeObjets_to_compare)

	# recover a genome object from its genome name
	for obj in GenomesObjet :
		if obj.name == genome_to_process[0] :
			genomeToUse = obj
			break

	# add variants informations in the xml
	listeVariants = etree.SubElement(comparaison, "VARIANTS")
	for pos in dicoSpecifique :

		for variant in genomeToUse.variants:

			if str(variant.pos) == str(pos) :

				listeVariant = etree.SubElement(listeVariants, "VARIANT")

				variantType = etree.SubElement(listeVariant, "TYPE")
				variantType.text = variant.type

				variantPos = etree.SubElement(listeVariant, "POSITION")
				variantPos.text = str(variant.pos)

				variantNucl = etree.SubElement(listeVariant, "NUCL")
				variantNucl.text = variant.var

				variantHomo = etree.SubElement(listeVariant, "HOMOPLASY")
				if pos in dicoSpecifique_vsALL :
					variantHomo.text = "No"
				else :	
					variantHomo.text = "Yes"

				variantRegion = etree.SubElement(listeVariant, "REGION")
				variantRegion.set("value", variant.region)

				if variant.region == "intragenic":

					variantGeneId = etree.SubElement(variantRegion, "GENE_ID")
					variantGeneId.text = variant.geneID

					variantGeneName = etree.SubElement(variantRegion, "GENE_NAME")
					variantGeneName.text = variant.geneName

					variantTranscrit = etree.SubElement(variantRegion, "TRANSCRIT")
					variantTranscrit.text = variant.transcritID

					variantImpact = etree.SubElement(variantRegion, "IMPACT")
					variantImpact.text = variant.impact

				break

	return root


#main function	
def main():


	##################
	# gets arguments #
	##################

	parser=get_parser()
	
	#print parser.help if no arguments
	if len(sys.argv)==1:
		parser.print_help()
		sys.exit(1)
	
	Arguments=parser.parse_args()

	###################################################################
	# extract genomes name from inputs files and makes genome objects #
	###################################################################

	print "--> read genomes to process"
	genome_to_process = fileToList(Arguments.GENOMES)
	print "--> read genomes to compare"
	genome_to_compare = fileToList(Arguments.COMPARE)
	genomes_all = genome_to_process + genome_to_compare

	print "--> process VCF file"
	GenomesObjet = readVCFfile(Arguments.VCF, genomes_all)

	#################################
	# extract variants and make XML #
	#################################

	print "--> extract variants and make XML"
	root = makeXML(GenomesObjet, genome_to_process, genome_to_compare)

	outputFile = open(Arguments.OUTPUT + ".xml", 'w')	
	outputFile.write(etree.tostring(root, pretty_print=True))
	outputFile.close()		

	print "Finish"

if __name__ == "__main__":
	main()				
					