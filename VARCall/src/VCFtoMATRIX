#!/usr/bin/python
# -*- coding: iso-8859-1 -*-
import os, sys
import csv
import argparse
from itertools import chain


__doc__="""
Create distance matrix in tabular file from VCF file.
This script was designed for the VARCall workflow.
"""

def get_parser():
	"""
	Parse arguments
	@return: arguments list
	@rtype: parser object
	"""

	parser = argparse.ArgumentParser(description='Create SNP and INDEL concatenate variant fasta file from VCF file')

	parser.add_argument('-i', action="store", dest='VCF', 
						type=str, required=True, help='vcf file (REQUIRED)')

	parser.add_argument('-o', action="store", dest='output', 
						type=str, default='output', help='output prefix (default:output)')

	return parser



def write_dico(dico, file):
	"""
	Write the matrix in an output file
	@param dico: dictionnary with for each genomes a dictionnary of SNP/INDEL differences between itself and other genomes 
	@type dico: dictionnary
	@param file: output file name
	@type file: string
	"""

	outfile = open(file, 'wb')

	for element in dico :
		header = element.split('/')[-1]		
		outfile.write('\t' + header)

	outfile.write('\n')	

	for element in dico :
		header = element.split('/')[-1]
		outfile.write(header)
		for strain in dico[element]:	
			outfile.write('\t' + str(dico[element][strain]))
		outfile.write('\n')		

	outfile.close()



#main function	
def main():


	parser=get_parser()
		
	#print parser.help if no arguments
	if len(sys.argv)==1:
		parser.print_help()
		sys.exit(1)

	Arguments=parser.parse_args()

	#Detect header
	firstLine = True

	#liste of genome names
	listGenome = []

	#dictionnary for each type of variation
	dicoResult_SNP = {}
	dicoResult_INDEL = {}
	dicoResult_ALL = {}


	with open(Arguments.VCF, 'rb') as csvfile:
		TSVreader = csv.reader(csvfile, delimiter='\t')

		for row in TSVreader :

			#skips lines before the header line
			if("##" not in row[0]):

				#get genome name
				if firstLine :
					nbGenomes = len(row) - 9
					
					#dictionnaries initialization

					for i in row[9:] :
						dicoResult_SNP[i] = {}
						dicoResult_INDEL[i] = {}
						dicoResult_ALL[i] = {}
						listGenome.append(i)


					for g in listGenome :
						for element in dicoResult_SNP :
							dicoResult_SNP[element][g] = 0
						for element in dicoResult_INDEL :
							dicoResult_INDEL[element][g] = 0
						for element in dicoResult_ALL :
							dicoResult_ALL[element][g] = 0			


					firstLine = False

				elif(row[4] != '.') :
					
					#liste of variation for this line
					variant = []
					variant.append(row[3])
					variantModif = []
					variantModif.append(row[4].split(','))
					variantModif = list(chain.from_iterable(variantModif))
					variant = variant + variantModif

					y = 0

					skip = False

					#check if they are a lack of data for this line
					for i in row[9:] :
						if('/' in i):
							skip = True
						else:	
							var = i.split(":")[0]
							if(var=='.'):
								skip = True


					if not skip :

						#compute the max length of the variant in order to detect if it's a SNP or INDEL
						maxLen = 0
						for baseVar in variant :
							if len(baseVar) > maxLen :
								maxLen = len(baseVar)
							if baseVar == '*': # si * -> del d'1nt --> considéré comme indel
								maxLen = 2
								#print(variant)

						#for each genome, compare the difference of variation between itself and other genomes		
						pos = 0
						for g in listGenome :
							v = row[9+pos].split(":")[0]
							j = 0
							for strain in row[9:] :	
								var = strain.split(":")[0]
								
								if(v!=var):
									if maxLen > 1 :#indel
										dicoResult_INDEL[g][listGenome[j]]+=1
										dicoResult_ALL[g][listGenome[j]]+=1
									else:#SNP
										dicoResult_SNP[g][listGenome[j]]+=1
										dicoResult_ALL[g][listGenome[j]]+=1	

								j+=1		
							pos+=1

	#write 3 matrix files : one just for SNP, one juste for INDEL and the addition of SNP + INDEL						
	write_dico(dicoResult_SNP, Arguments.output + "_SNP.tsv")
	write_dico(dicoResult_INDEL, Arguments.output + "_INDEL.tsv")						
	write_dico(dicoResult_ALL, Arguments.output + "_ALL.tsv")


if __name__ == "__main__":
	main()					
