#!/usr/bin/python
# -*- coding: iso-8859-1 -*-
import os, sys, time
import argparse
from subprocess import Popen, list2cmdline

__doc__="""
Merge SNPs VCF file and InDels VCF file.
This script was designed for the VARCall workflow.

@requires: GATK
@requires: SnpSift
"""


def get_parser():
	"""
	Parse arguments
	@return: arguments list
	@rtype: parser object
	"""

	parser = argparse.ArgumentParser(description='Merge SNPs VCF file and InDels VCF file')

	parser.add_argument('-ref', action="store", dest='refFASTA', 
						type=str, required=True, help='reference genome in FASTA (REQUIRED)')

	parser.add_argument('-SNP', action="store", dest='SNP', 
						type=str, required=True, help='filtrated VCF file for SNP (REQUIRED) ')

	parser.add_argument('-INDEL', action="store", dest='INDEL', 
						type=str, required=True, help='filtrated VCF file for InDel (REQUIRED)')

	parser.add_argument('-o', action="store", dest='output', 
						type=str, default='output', help='output name (default:output)')

	parser.add_argument('-m', action="store", dest='maxMemory', 
						type=int, default='4000', help='max memory to use in Mb (default:4000)')

	parser.add_argument('-GATKJAR', action="store", dest='GATKJAR', 
						type=str, default='/opt/GATK/3.4.0/GenomeAnalysisTK.jar', help='GenomeAnalysisTK jar path')  #required=True

	parser.add_argument('-SNPSIFTJAR', action="store", dest='SNPSIFTJAR', 
						type=str, default='/opt/snpEff/4.1/SnpSift.jar', help='SnpSift jar path')  #required=True

	parser.add_argument('--removeTmpFiles', dest='removeTmpFiles', action='store_true', help='remove temporary files (default:False)', default=False)

	return parser


def exec_commands(cmds, nbThreads):
    """
    Exec commands in parallel in multiple process (as much as we have CPU)
    @param cmds: list of commands
	@type cmds: list
	@param nbThreads: number of threads to use
	@type nbThreads: integer
    """
    if not cmds: return # empty list

    def done(p):
        return p.poll() is not None
    def success(p):
        return p.returncode == 0
    def fail():
        sys.exit(1)

    max_task = nbThreads
    processes = []
    while True:
        while cmds and len(processes) < max_task:
            task = cmds.pop()
            #print list2cmdline(task)
            processes.append(Popen(task))

        for p in processes:
            if done(p):
                if success(p):
                    processes.remove(p)
                else:
                    fail()

        if not processes and not cmds:
            break
        else:
            time.sleep(0.05)	



#main function	
def main():

	##################### gets arguments #####################
	parser=get_parser()
	
	#print parser.help if no arguments
	if len(sys.argv)==1:
		parser.print_help()
		sys.exit(1)
	
	Arguments=parser.parse_args()

	if Arguments.maxMemory >= 4000 :
		Xmx = "-Xmx4g"
	else :
		Xmx = "-Xmx2g"


	#SNP-InDel combination
	print "--> combination...\n"	
	cmds = []

	cmds.append(["java",Xmx, "-jar", Arguments.GATKJAR, \
		"-R", Arguments.refFASTA, \
		"-T", "CombineVariants", \
		"--variant:SNP", Arguments.SNP, \
		"--variant:InDel", Arguments.INDEL, \
		"-o", Arguments.output + "_SNP-InDel_PRIORITIZE.vcf", \
		"-genotypeMergeOptions", "PRIORITIZE", \
		"-priority", "SNP,InDel" \
		])

	exec_commands(cmds, 1)
	
	print "\n--> combination finish!\n"


	#Flag SNP/IN/DEL 
	print "--> Flag SNP/IN/DEL...\n"	
	cmds = []

	cmds.append(["java",Xmx, "-jar", Arguments.SNPSIFTJAR, \
		"varType", \
		Arguments.output + "_SNP-InDel_PRIORITIZE.vcf", \
		">", Arguments.output + "_SNP-InDel.vcf"])

	os.system(" ".join(cmds[0]))
	#exec_commands(cmds, 1)

	print "\n--> flag finish!\n"


	if Arguments.removeTmpFiles:

		cmds = ["rm", Arguments.output + "*_PRIORITIZE.vcf*"]
		os.system(" ".join(cmds))




if __name__ == "__main__":
	main()	            	