#!/usr/bin/python
# -*- coding: iso-8859-1 -*-
import os, sys
import csv
import argparse



__doc__="""
Filter VCF file by deleting lines with variant only in reference, miss informations in alignment \
and delete INDEL when they are SNP at the same position.
This script was designed for the VARCall workflow.
"""

def get_parser():
	"""
	Parse arguments
	@return: arguments list
	@rtype: parser object
	"""

	parser = argparse.ArgumentParser(description='Filter VCF file by deleting lines with variant \
		only in reference, miss informations in alignment and delete INDEL when they are SNP at \
		the same position')

	parser.add_argument('-i', action="store", dest='VCF', 
						type=str, required=True, help='vcf file (REQUIRED)')

	parser.add_argument('-o', action="store", dest='output', 
						type=str, default='output', help='output prefix (default:output)')

	return parser


def different_in_list(list):
	"""
	Return True if an element in a list exist at least twice 
	@param list : list of nucleic 
	@type type : list
	@return: True if an element in a list exist at least twice, False otherwise
	@rtype: boolean 
	"""

	nb_element = len(list)

	flag = True
	var = ""

	for element in list :

		if flag : # first element in the list
			flag = False
			var = element

		else :
			if element != var :
				return True
			else :
				var = element	

	return False			
				 

#main function	
def main():

	##################
	# gets arguments #
	##################


	parser=get_parser()
		
	#print parser.help if no arguments
	if len(sys.argv)==1:
		parser.print_help()
		sys.exit(1)

	Arguments=parser.parse_args()

	# open VCF file

	outfile = open(Arguments.output +'.vcf', "w")


	with open(Arguments.VCF, 'rb') as csvfile:
		TSVreader = csv.reader(csvfile, delimiter='\t')

		pos = -1

		for row in TSVreader :	

			# check if header
			if("#" not in row[0]):
				
				flag = True

				
				# SNP+INDEL filter
				if int(row[1]) == pos :
					flag = False	

					
				pos = int(row[1])

				vari_list = []				

				for col in row[9:] :
					vari = col.split(':')[0] # recover the nucleotide

					# unkown variant filter
					if('.' in vari):
						flag = False
						break

					else :	
						vari_list.append(vari)	

				if flag == True and different_in_list(vari_list) == True :
					outfile.write('\t'.join(row)+'\n')

				else :
					print '\t'.join(row)	
				
			else :
				outfile.write('\t'.join(row)+'\n')	


	outfile.close()		



if __name__ == "__main__":
	main()				

