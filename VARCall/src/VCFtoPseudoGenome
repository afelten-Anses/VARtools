#!/usr/bin/env python
# -*- coding: iso-8859-1 -*-
import os, sys
import csv
import argparse
from itertools import chain
from Bio import SeqIO



__doc__="""
Make pseudo genome from a VCF file and the reference FASTA file (1 contig).
This script was designed for the VARCall workflow.
"""

def get_parser():
	"""
	Parse arguments
	@return: arguments list
	@rtype: parser object
	"""

	parser = argparse.ArgumentParser(description='Make pseudo genome from a VCF file and the reference FASTA file (1 sequence)')

	parser.add_argument('-i', action="store", dest='VCF', 
						type=str, required=True, help='vcf file (REQUIRED)')

	parser.add_argument('-ref', dest='ref', 
						type=str, required=True, help='reference genome in FASTA (REQUIRED)')

	parser.add_argument('-o', action="store", dest='output', 
						type=str, default='output.fasta', help='output (default:output.fasta)')

	parser.add_argument('--NoINDELs', dest='NoINDELs', action='store_true', help='remove INDELs position (default:False)', default=False)


	return parser


def write_fasta(outputFile, dicoResult):
	"""
	Write a multi FASTA file from dictionnary.
	@param outputFile: output FASTA file name
	@type outputFile: string
	@param dicoResult: dictionnary with header for key and the list of nucleotide for value
	@type dicoResult: dictionnary
	"""

	outTab = open(outputFile, "wb")

	for element in dicoResult :
		header = element.split('/')[-1]
		outTab.write('>' + header + '\n')
		sequence = ''.join(dicoResult[element])
		i = 0
		for nt in sequence :
			outTab.write(nt)
			i+=1
			if i%70==0 :
				outTab.write('\n')
		outTab.write('\n\n')

	outTab.close()	


def fasta_to_dico(FASTAfile):
	"""
	Stock sequence from FASTA file to dictionnary.
	@param FASTAfile: FASTA file name
	@type FASTAfile: string
	@param record_dict: dictionnary with header for key and sequence for value
	@type record_dict: dictionnary
	"""

	handle = open(FASTAfile, "rU")
	record_dict = SeqIO.to_dict(SeqIO.parse(handle, "fasta"))
	handle.close()

	return record_dict


def check_ref(dicoRef):
	"""
	Check if the reference FASTA file contain only one contig.
	@param dicoRef: dictionnary with header for key and sequence for value
	@type dicoRef: dictionnary
	"""
	if len(dicoRef.keys())>1 :
		print "ERROR : more than one sequence in the reference FASTA file !"
		sys.exit(1)


#main function	
def main():


	parser=get_parser()
	csv.field_size_limit(900000000)
	
	#print parser.help if no arguments
	if len(sys.argv)==1:
		parser.print_help()
		sys.exit(1)

	Arguments=parser.parse_args()


	#stock reference in a dictionary
	ref = fasta_to_dico(Arguments.ref)
	check_ref(ref)
	seqRef = str(ref[ref.keys()[0]].seq)

	firstLine = True
	listGenome = []
	dicoResult_ALL = {}
	pos = 0


	if Arguments.NoINDELs :
		VCFfile = open(Arguments.VCF, 'rb')
		lines = VCFfile.readlines()
		VCFfile.close()
		tmpFile = open("tmp_pseudo.vcf",'w')

		for line in lines :
			row = line.split('\t')
			if line[0]=='#':
				tmpFile.write(line)
			elif(len(row[3])==1):
				alternatif = line.split('\t')[4]
				if not(',' in alternatif) and len(alternatif)==1:
					tmpFile.write(line)	
				else :
					alternatifs = alternatif.split(',')	
					flag = True
					for element in alternatifs :
						if len(element)>1:
							flag = False
							break
					if flag : 	
						tmpFile.write(line)	
		

		tmpFile.close()
		Arguments.VCF = "tmp_pseudo.vcf"



	with open(Arguments.VCF, 'rb') as csvfile:
		TSVreader = csv.reader(csvfile, delimiter='\t')

		for row in TSVreader :

			if("##" not in row[0]):

				if firstLine :
					nbGenomes = len(row) - 9
					
					for i in row[9:] :
						dicoResult_ALL[i] = []
						listGenome.append(i)
					firstLine = False
					
				else :
				
					variant = []
					variant.append(row[3])
					variantModif = []

					if(row[4] != '.' and '*' not in row[4]):
					
						variantModif.append(row[4].split(','))
						variantModif = list(chain.from_iterable(variantModif))
						variant = variant + variantModif

						newPos = int(row[1]) 

						if(newPos > pos + 1):
							for genome in dicoResult_ALL :
								dicoResult_ALL[genome].append(seqRef[pos:newPos-1])

						pos = newPos

						y = 0

						j = 0	
						for i in row[9:] :

							var = i.split(":")[0]

							maxLen = 0
							for baseVar in variant :
								if len(baseVar) > maxLen :
									maxLen = len(baseVar)

							if maxLen > 1 :

								if j == 0 :
									variantGap = []
									for baseVar in variant :
										variantGap.append(baseVar + '-'*(maxLen-len(baseVar)))
									variant = variantGap
							
							if(var=='.'):
								dicoResult_ALL[listGenome[y]].append('N')

							else:	
								dicoResult_ALL[listGenome[y]].append(variant[int(var)])

							y += 1
							j += 1


	if(pos < len(seqRef)):
		for genome in dicoResult_ALL :
			dicoResult_ALL[genome].append(seqRef[pos:len(seqRef)])	

	#print dicoResult_ALL							

	write_fasta(Arguments.output, dicoResult_ALL)

	if Arguments.NoINDELs :
		os.remove("tmp_pseudo.vcf")
			


if __name__ == "__main__":
	main()					
