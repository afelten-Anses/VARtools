#!/usr/bin/python
# -*- coding: iso-8859-1 -*-
import os, sys
import datetime
import time
from time import *
import argparse
import subprocess 
from os.path import exists
import copy


__doc__="""
Do the SNP/Indel calling from several FASTQ files

@requires: BWA
@requires: samtools
@requires: picard-tools
@requires: Trimmomatic
@requires: GATK
@requires: SnpSift
@requires: BAMmaker, VCFmaker_SNP, VCFmaker_INDEL, VCFmaker_INDEL, VCFilter, VCFtoMATRIX and VCFtoFASTA in $PATH

Paired-end reads must be nammed as "prefix_R1.XXXX" and "prefix_R2.XXXX".
Example : E1_R1.fq and E1_R2.fq
"""

def get_parser():
	"""
	Parse arguments
	@return: arguments list
	@rtype: parser object
	"""

	parser = argparse.ArgumentParser(description='SNP/Indel caller workflow')

	parser.add_argument('-ref', action="store", dest='refFASTA', 
						type=str, required=True, help='reference genome in FASTA (REQUIRED)')

	parser.add_argument('-reads', action="store", dest='reads', 
						type=str, required=True, nargs='+', help='single-end reads FASTQ file or paired-end reads \
						FASTQ files  (REQUIRED). Paired-end reads must be nammed as "prefix_R1.XXXX" and "prefix_R2.XXXX", \
						example : E1_R1.fq and E1_R2.fq')

	parser.add_argument('-a', action="store", dest='adaptaters', 
						type=str, required=True, default=None, help='adaptaters FASTA file (REQUIRED)')

	parser.add_argument('-TRIMJAR', action="store", dest='TRIMJAR', 
						type=str, default='/opt/Trimmomatic/0.33/trimmomatic-0.33.jar', help='Trimmomatic jar path') #required=True

	parser.add_argument('-GATKJAR', action="store", dest='GATKJAR', 
						type=str, default='/opt/GATK/3.4.0/GenomeAnalysisTK.jar', help='GenomeAnalysisTK jar path') #required=True

	parser.add_argument('-PICARDJAR', action="store", dest='PICARDJAR', 
						type=str, default='/opt/picard-tools/1.133/picard.jar', help='picard-tools jar path') #required=True

	parser.add_argument('-SNPSIFTJAR', action="store", dest='SNPSIFTJAR', 
						type=str, default='/opt/snpEff/4.1/SnpSift.jar', help='SnpSift jar path')

	parser.add_argument('-o', action="store", dest='output', 
						type=str, default='output', help='output prefix (default:output)')

	parser.add_argument('-q', action="store", dest='minQuality', 
						type=int, default='30', help='min phred score per base for trimming (default:30)')

	parser.add_argument('-l', action="store", dest='minLen', 
						type=int, default='50', help='min read length for trimming (default:50)')
	
	parser.add_argument('-PL', action="store", dest='PL', 
						type=str, default='UNKNOWN', help='sequencing plateform for RG line (default:UNKNOWN)')

	parser.add_argument('-PU', action="store", dest='PU', 
						type=str, default='UNKNOWN', help='sequencer ID for RG line (default:UNKNOWN)')

	parser.add_argument('-LB', action="store", dest='LB', 
						type=str, default='UNKNOWN', help='sequencing library (default:UNKNOWN)')

	parser.add_argument('-s', action="store", dest='stand_call_conf', 
						type=str, default='50', help='stand_call_conf parameter for GATK UnifiedGenotyper (default:50)')

	parser.add_argument('-T', action="store", dest='nbThreads', 
						type=int, default='1', help='maximum number of threads to use (default:1)')

	parser.add_argument('-m', action="store", dest='maxMemory', 
						type=int, default='4000', help='max memory to use in Mb (default:4000)')

	parser.add_argument('--removeDuplicates', dest='removeDuplicates', action='store_true', help='remove duplicates reads', default=False)	

	parser.add_argument('--indelRealigner', dest='indelRealigner', action='store_true', help='local realignment around indels', default=False)	

	parser.add_argument('--removeTmpFiles', dest='removeTmpFiles', action='store_true', help='remove temporary files', default=False)


	return parser


def checkPE(readsList):
	"""
	checks all paired-end reads and reordering them
	@param readsList: list of reads given by the argument parser
	@type readsList: list
	@return: read list
	@rtype: list
	"""

	
	ordered_readList = []

	tmpList = []

	for reads in readsList :

		prefix = reads.split(".")[0]
		

		if('_R1.' in reads or '_1.' in reads or '_R2.' in reads or '_2.' in reads) :

			flag = False

			for element in tmpList :
				if(prefix[:len(prefix)-1] in element):
					if('_R1.' in reads or '_1.' in reads):
						ordered_readList.append(reads + " " + element)
					else:	
						ordered_readList.append(element + " " + reads)
					flag = True
					break	

			if not flag :
				tmpList.append(reads)

			else:
				tmpList.remove(element)		

		else :
			ordered_readList.append(reads)				
			
	if(len(tmpList)>0):
		print "ERROR : miss PE reads or named incorrectly!"
		sys.exit(1)			

	return ordered_readList		


def commandLaunched(Arguments, logFile):
	"""
	Print VarCall command in log file
	@param Arguments: list of arguments
	@type Arguments: parser object
	@param logFile: log file
	@type logFile: string
	"""

	os.system("echo VarCall >> " + logFile )
	os.system("echo " + "-ref " + Arguments.refFASTA + " >> " + logFile )
	os.system("echo " + "-reads " + " ".join(Arguments.reads) + " >> " + logFile )
	os.system("echo " + "-ref " + Arguments.refFASTA + " >> " + logFile )
	os.system("echo " + "-a " + Arguments.adaptaters + " >> " + logFile )
	os.system("echo " + "-o " + Arguments.output + " >> " + logFile )
	os.system("echo " + "-q " + str(Arguments.minQuality) + " >> " + logFile )
	os.system("echo " + "-l " + str(Arguments.minLen) + " >> " + logFile )
	os.system("echo " + "-s " + Arguments.stand_call_conf + " >> " + logFile )
	os.system("echo " + "-T " + str(Arguments.nbThreads) + " >> " + logFile )
	os.system("echo " + "-m " + str(Arguments.maxMemory) + " >> " + logFile )

	if Arguments.removeDuplicates :
		os.system("echo --removeDuplicates >> " + logFile )

	if Arguments.indelRealigner :
		os.system("echo --indelRealigner >> " + logFile )
		
	if Arguments.removeTmpFiles :
		os.system("echo --removeTmpFiles >> " + logFile )	
	

def checkFiles(fileList):
	"""
	Check if all file of a list exist
	@param fileList: list file pathway
	@type fileList: list
	"""

	for element in fileList :
		if(exists(element)==False):
			print "ERROR : file " + element + " don't exist!"
			sys.exit(1)	



#main function	
def main():	

	#execution time
	t1 = time()

	##################### gets arguments #####################
	parser=get_parser()
	
	#print parser.help if no arguments
	if len(sys.argv)==1:
		parser.print_help()
		sys.exit(1)
	
	Arguments=parser.parse_args()	

	fileList = copy.copy(Arguments.reads)
	fileList.append(Arguments.refFASTA)
	fileList.append(Arguments.adaptaters)
	checkFiles(fileList)

	##################### chdir output dir #####################	

	if('/' in Arguments.output):
		liste = Arguments.output.split('/')
		dirName = '/'.join(liste[0:len(liste)-1])
		os.chdir(dirName)
		Arguments.output = "".join(liste[len(liste)-1:len(liste)])

	os.system("mkdir " + Arguments.output)	
	logFile = Arguments.output + '/' + Arguments.output + ".log"	


	os.system("echo " + strftime("%Y-%m-%d %H:%M") + " >> " + logFile)
	commandLaunched(Arguments, logFile)


	##################### ckecks SE and PE reads #####################

	readsList = checkPE(Arguments.reads)

	################ Step 1 : BAMmaker

	print "Step 1/9 ---> make BAM files"
	os.system("mkdir " + Arguments.output + "/BAM")	

	#for each PE/SE reads

	i = 1	
	bamFiles = []
	for reads in readsList :

		if " " in reads :
			r1 = reads.split(" ")[0]
		else :
			r1 = reads 

		outputName = r1.split("/")[-1]
		outputName = outputName.split(".")[-2]	

		if("_R1" in outputName):
			outputName = outputName.replace("_R1","")
		if("_1" in outputName):
			outputName = outputName.replace("_1","")
		if("_R2" in outputName):
			outputName = outputName.replace("_R2","")		
		if("_2" in outputName):
			outputName = outputName.replace("_2","")	

		print "     - make BAM for " + outputName 

		outputName = Arguments.output + "/BAM/" + outputName

		cmd = ["BAMmaker" , "-ref" , Arguments.refFASTA , "-reads" , reads , "-TRIMJAR" , \
			Arguments.TRIMJAR , "-GATKJAR" , Arguments.GATKJAR , "-PICARDJAR" , Arguments.PICARDJAR , \
			"-o" , outputName , "-q" + str(Arguments.minQuality) , \
			"-l" , str(Arguments.minLen), "-PL" , Arguments.PL , \
			"-PU" , str(Arguments.PU) , "-LB" , Arguments.LB , "-T" ,  str(Arguments.nbThreads) , \
			"-m " + str(Arguments.maxMemory)]	

		if(Arguments.adaptaters):
			cmd.append(" -a " + Arguments.adaptaters)	
		if(Arguments.removeDuplicates):
			cmd.append(" --removeDuplicates ")
		if(Arguments.indelRealigner):
			cmd.append(" --indelRealigner ")
		if(Arguments.removeTmpFiles):
			cmd.append(" --removeTmpFiles ")	

		#print " ".join(cmd)	


		os.system("echo " + " ".join(cmd) + " >> " + logFile)

		os.system(" ".join(cmd) + ">> " + logFile + " 2>&1")	

		if(Arguments.removeDuplicates and Arguments.indelRealigner):
			outputName = outputName + "_removedup_realigned.bam"
		elif(Arguments.removeDuplicates):
			outputName = outputName + "_removedup.bam"
		elif(Arguments.indelRealigner):		
			outputName = outputName + "_realigned.bam"
		else:
			outputName = outputName + "_sorted.bam"	

		bamFiles.append(outputName)
		

	################ Step 2 : VCFmaker SNP

	os.system("mkdir " + Arguments.output + "/VCF")
	outputName = Arguments.output + "/VCF/" + Arguments.output

	print "Step 2/9 ---> make VCF (SNPs)"

	cmd = ["VCFmaker_SNP", "-ref" , Arguments.refFASTA , \
	"-o", outputName, "-m ", str(Arguments.maxMemory), "-GATKJAR", Arguments.GATKJAR, \
	"-s", Arguments.stand_call_conf , "-T", str(Arguments.nbThreads), "-b" , " ".join(bamFiles)]

	if(Arguments.removeTmpFiles):
		cmd.append(" --removeTmpFiles ")	

	#print " ".join(cmd)	
	os.system("echo " + " ".join(cmd) + " >> " + logFile)
	
	os.system(" ".join(cmd) + " >> " + logFile + " 2>&1")	
	

	################ Step 3 : VCFmaker INDEL

	outputName = Arguments.output + "/VCF/" + Arguments.output

	print "Step 3/9 ---> make VCF (InDels)"

	cmd = ["VCFmaker_INDEL", "-ref" , Arguments.refFASTA , \
	"-o", outputName, "-m ", str(Arguments.maxMemory), "-GATKJAR", Arguments.GATKJAR, \
	"-s", Arguments.stand_call_conf , "-T", str(Arguments.nbThreads), "-b" , " ".join(bamFiles)]

	if(Arguments.removeTmpFiles):
		cmd.append(" --removeTmpFiles ")	

	#print " ".join(cmd)	
	os.system("echo " + " ".join(cmd) + " >> " + logFile)
	
	os.system(" ".join(cmd) + " >> " + logFile + " 2>&1")	
	

	################ Step 4: merge SNP and INDEL VCF files

	print "Step 4/9 ---> merge SNPs and InDels VCF files"

	cmd = ["SNP-INDEL_merge", "-ref" , Arguments.refFASTA , \
	"-o", outputName, \
	"-SNP", outputName + "_SNP_filtrated.vcf", \
	"-INDEL", outputName + "_InDel_filtrated.vcf", \
	"-m", str(Arguments.maxMemory), \
	"-SNPSIFTJAR", Arguments.SNPSIFTJAR]

	if(Arguments.removeTmpFiles):
		cmd.append(" --removeTmpFiles ")	

	#print " ".join(cmd)
	os.system("echo " + " ".join(cmd) + " >> " + logFile)
	
	os.system(" ".join(cmd) + ">> " + logFile + " 2>&1")	


	################ Step 5: VCF filter

	print "Step 5/9 ---> SNPs + InDels filter"

	cmd = ["VCFilter", \
	"-i", outputName + "_SNP-InDel.vcf", \
	"-o", outputName + "_SNP-InDel_filtered"]

	#print " ".join(cmd)
	os.system("echo " + " ".join(cmd) + " >> " + logFile)
	
	os.system(" ".join(cmd) + ">> " + logFile + " 2>&1")

	if(Arguments.removeTmpFiles):
		os.system("rm " + outputName + "_SNP-InDel.vcf")
		

	################ Step 6 : vcf to matrix

	print "Step 6/9 ---> make matrix from VCF"

	os.system("mkdir " + Arguments.output + "/matrix")
	outputName2 = Arguments.output + "/matrix/" + Arguments.output

	cmd = ["VCFtoMATRIX", "-i", outputName + "_SNP-InDel_filtered.vcf", "-o", outputName2 ]	

	#print " ".join(cmd)
	os.system("echo " + " ".join(cmd) + " >> " + logFile)
	
	os.system(" ".join(cmd) + ">> " + logFile + " 2>&1")
	

	################ Step 7 : vcf to fasta

	print "Step 7/9 ---> concatenate variant in FASTA files"

	os.system("mkdir " + Arguments.output + "/FASTA")
	outputName3 = Arguments.output + "/FASTA/" + Arguments.output

	cmd = ["VCFtoFASTA", "-i", outputName + "_SNP-InDel_filtered.vcf", "-o", outputName3, \
	'--SNP', '--INDEL']

	#print " ".join(cmd)
	os.system("echo " + " ".join(cmd) + " >> " + logFile)
	
	os.system(" ".join(cmd) + ">> " + logFile + " 2>&1")


	################ Step 8 : vcf to pseudo genome

	print "Step 8/9 ---> pseudo genome reconstruction"

	cmd = ["VCFtoPseudoGenome", "-i", outputName + "_SNP_filtrated.vcf -ref ",\
	Arguments.refFASTA, "-o", outputName3 + '_pseudoGenomes.fasta']

	#print " ".join(cmd)
	os.system("echo " + " ".join(cmd) + " >> " + logFile)
	
	os.system(" ".join(cmd) + ">> " + logFile + " 2>&1")


	################ Step 9 : make report

	print "Step 9/9 ---> making pdf report"

	cmd = ["reportMaker", "-i", logFile, "-o", Arguments.output + '/' + Arguments.output]

	os.system("echo " + " ".join(cmd) + " >> " + logFile)

	# write duration in log
	t2 = time() - t1
	os.system("echo " + "Duration : " + strftime('%Hh %Mm %Ss', gmtime(t2)) + " >> " + logFile)

	os.system(" ".join(cmd) + ">> " + logFile + " 2>&1")


	print "Finish !"


if __name__ == "__main__":
	main()	        	