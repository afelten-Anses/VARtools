#!/usr/bin/env python
# -*- coding: iso-8859-1 -*-
import os, sys, time
import argparse
from subprocess import Popen, list2cmdline

__doc__="""
@requires: bgzip
@requires: tabix
@requires: vcf-merge
@requires: Vcf.pm (vcftools)
"""

def get_parser():
	"""
	Parse arguments
	@return arguments list
	@rtype: parser object
	"""

	parser = argparse.ArgumentParser(description='merge VCF files and select variants')

	parser.add_argument('-ref', action="store", dest='refFASTA', 
						type=str, required=True, help='reference genome in FASTA (REQUIRED)')

	parser.add_argument('-f', action="store", dest='VCF', 
						type=str, required=True, nargs='+', help='VCF files (REQUIRED)')

	parser.add_argument('-o', action="store", dest='output', 
						type=str, default='output', help='output name (default:output)')

	parser.add_argument('-m', action="store", dest='maxMemory', 
						type=int, default='4000', help='max memory to use in Mb (default:4000)')

	parser.add_argument('-GATKJAR', action="store", dest='GATKJAR', 
						type=str, default='/opt/GATK/3.4.0/GenomeAnalysisTK.jar', help='GenomeAnalysisTK jar path')  #required=True

	parser.add_argument('-s', action="store", dest='stand_call_conf', 
						type=str, default='50', help='stand_call_conf parameter for GATK UnifiedGenotyper (default:50)')

	parser.add_argument('-T', action="store", dest='nbThreads', 
						type=int, default='1', help='maximum number of threads to use (default:1)')

	parser.add_argument('--removeTmpFiles', dest='removeTmpFiles', action='store_true', help='remove temporary files (default:False)', default=False)

	return parser


def exec_commands(cmds, nbThreads):
    """
    Exec commands in parallel in multiple process (as much as we have CPU)
    @param cmds: list of commands
	@type cmds: list
	@param nbThreads: number of threads to use
	@type nbThreads: integer
    """
    if not cmds: return # empty list

    def done(p):
        return p.poll() is not None
    def success(p):
        return p.returncode == 0
    def fail():
        sys.exit(1)

    max_task = nbThreads
    processes = []
    while True:
        while cmds and len(processes) < max_task:
            task = cmds.pop()
            #print list2cmdline(task)
            processes.append(Popen(task))

        for p in processes:
            if done(p):
                if success(p):
                    processes.remove(p)
                else:
                    fail()

        if not processes and not cmds:
            break
        else:
            time.sleep(0.05)	



#main function	
def main():

	##################### gets arguments #####################
	parser=get_parser()
	
	#print parser.help if no arguments
	if len(sys.argv)==1:
		parser.print_help()
		sys.exit(1)
	
	Arguments=parser.parse_args()

	if Arguments.maxMemory >= 4000 :
		Xmx = "-Xmx4g"
	else :
		Xmx = "-Xmx2g"	



	#merge VCF	
	print "--> VCF merge...\n"
	
	for VCFfile in Arguments.VCF :
		cmds = []
		cmds.append(["bgzip", VCFfile])
		exec_commands(cmds, 1)
		cmds = []
		cmds.append(["tabix", "-p", "vcf", VCFfile + ".gz"])
		exec_commands(cmds, 1)
		
	cmds = []
	cmds.append("vcf-merge")
	for VCFfile in Arguments.VCF :
		cmds.append(VCFfile + ".gz")	
	cmds.append(">")
	cmds.append(Arguments.output + "_SNP_raw.vcf")	

	os.system(' '.join(cmds))

	print "\n--> VCF merge finish!\n"


	#sys.exit(0)

	#variant filtration
	print "--> SNP filtration...\n"
	cmds = []

	cmds.append(["gatk --java-options '",Xmx,"' " , \
		"-R", Arguments.refFASTA, \
		"-T", "VariantFiltration", \
		"-o", Arguments.output + "_SNP_flag.vcf", \
		"--variant", Arguments.output + "_SNP_raw.vcf", \
		"--filterExpression", "\"AB < 0.2 || MQ0 > 50\"", \
		"--filterName", "\"AlleleBalanceAndMultipleMapping\"", \
		"--filterExpression", "\"DP < 10\"", \
		"--filterName", "\"lowcov\"",  \
		"--filterExpression", "\"QD < 1.5\"", \
		"--filterName", "\"LowQD\"", \
		"--filterExpression", "\"QUAL < 50.0\"", \
		"--filterName", "\"LowPhred\"", \
		"--filterExpression", "\"FS > 60.0\"", \
		"--filterName", "\"StrandBias\"", \
		"--filterExpression", "\"MQRankSum < -12.5\"", \
		"--filterName", "\"LowMQRS\"", \
		"--filterExpression", "\"MQ < 30.0\"", \
		"--filterName", "\"LowMQ\"", \
		"--filterExpression", "\"MQ0 >= 4 && ((MQ0 / (1.0 * DP)) > 0.1)\"", \
		"--filterName", "\"Hard_to_validate\"", \
		"--filterExpression", "\"ReadPosRankSum < -8.0\"", \
		"--filterName", "\"ReadPosRankSum\"", \
		])

	os.system(" ".join(cmds[0]))
	#exec_commands(cmds, 1) --> error "=" in filterExpression
	
	print "\n--> SNP filtration finish!\n"	


	#variant selection
	print "--> SNP selection...\n"
	cmds = []

	cmds.append(["gatk --java-options '",Xmx,"' " , \
		"-R", Arguments.refFASTA, \
		"-T", "SelectVariants", \
		"--variant", Arguments.output + "_SNP_flag.vcf", \
		"-o", Arguments.output + "_SNP_filtrated.vcf", \
		"-ef"\
		, "-nt ", str(Arguments.nbThreads)\
		])

	#print " ".join(cmds[0])

	exec_commands(cmds, 1)

	#variants metrics

	cmds.append(["gatk --java-options '",Xmx,"' " , \
		"-T", "VariantEval", \
		"-R", Arguments.refFASTA, \
		"-o", Arguments.output + "_SNP_filtrated.txt", \
		"--eval", Arguments.output + "_SNP_filtrated.vcf"
		, "-nt ", str(Arguments.nbThreads)\
		])

	exec_commands(cmds, 1)


	print "\n--> SNP selection finish!\n"


	if Arguments.removeTmpFiles:

		cmds = ["rm", Arguments.output + "_SNP_flag.vcf*"]
		os.system(" ".join(cmds))


if __name__ == "__main__":
	main()	            	
