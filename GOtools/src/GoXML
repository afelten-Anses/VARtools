#!/usr/bin/env python
# -*- coding: utf-8 -*-
import os, sys, time  
import argparse       				#arguments parser
import uuid           				#uuid filename format
import urllib,urllib2 				#html requests
from lxml import etree 				#xml parser
import xml.etree.ElementTree as ET 	#xml parser ElemenTree only

__doc__="""
GoXML workfow. In order to add GO-terms from a XML file and generate a non-enriched universe of GO-terms.

@requires: U{python 2.7<https://www.python.org/downloads/>} (tested with 2.7.6)
@requires: U{PyVCF<https://github.com/jamescasbon/PyVCF>}
@requires: U{lxml<https://github.com/lxml/lxml>}
@requires: GOslimmer_xml
"""


def get_parser():
	"""
	Arguments setting and parsing
	@return: arguments list
	@rtype: parser object
	"""

	parser = argparse.ArgumentParser(description=' -d and -g are optional')


	parser.add_argument('-i', action="store", dest='input', 
						type=str, required=True, help='XML path (REQUIRED)')


	parser.add_argument('-obo', action="store", dest='obo', 
						type=str, required=True, help='go-basi.obo path (REQUIRED)')


	parser.add_argument('-o', action="store", dest='output', 
						type=str, required=True, help='output file (REQUIRED)')


	parser.add_argument('-d', action="store", dest='NPdatabases', 
						type=str, required=False, help='NP-EBI_databases.tsv path')


	parser.add_argument('-g', action="store", dest='GOdatabases', 
						type=str, required=False, help='EBI-GO_databases.tsv path')


	parser.add_argument('-p', action="store", dest='GoProkk', 
						type=str, required=True, help='GO_prok.txt path (REQUIRED)')


	parser.add_argument('--withHomoplasy', dest='withHomoplasy', action='store_true', help='keep homoplasy variants', default=False)



	return parser



#########################################################################################
#######################READ LOCAL FILES (tsv databases)##################################
#########################################################################################


def readDBFile(fichier): # Read NP to Uniprot ids correspondances from local storage

	"""
	Read NP-EBI local storage file
	@param fichier: NP-EBI_table.tsv file
	@type fichier: string
	@return: dictionnary of NP identifiers
	@rtype: dictionnary
	"""

	##Read NP-EBI-databases.tsv
	f = open(fichier, 'r')
	lines = f.readlines()
	f.close()
	dico = {}

	#For every line in NP-EBI-databases.tsv , store NP to Uniprot ids in a dictionnary
	for line in lines :

		line = line.rstrip()
		liste = line.split('\t')

		if len(liste)>1:

			dico[liste[0]] = liste [1]

	return dico	


def readDBGOFile(fichier): ##Same goal as readBBFile, applied for Uniprot to GO ids
	"""
	Read EBI-GO local storage file
	@param fichier: EBI-GO_table.tsv file
	@type fichier: string
	@return: dictionnary of GO identifiers
	@rtype: dictionnary
	"""
	
	f = open(fichier, 'r')
	lines = f.readlines()
	f.close()
	dico = {}

	for line in lines :

		line = line.rstrip()
		liste = line.split('\t')
		uniprotID = liste[0]

		if len(liste)>1:

			GOterms = liste[1].split(';')
			dico[uniprotID] = GOterms

	return dico	


#######################################################################################################################
#XML TRANSCRIT IDS EXTRACTION##########################################################################################
#######################################################################################################################


def extractNP(path, withHomoplasy): #Retrieve NP ids from XML file
	"""
	Retrieve NP ids from XML file
	@param path : relative path to the XML file
	@type path: string
	@return: dictionnary of NP identifiers
	@rtype: dictionnary
	"""

	print "\nPARSING XML..."

	#counter
	t0=time.time()
	nb=0


	#Store list of ALL transcrit ids( NP_xxx, STM_xxx, and every other ids )
	nplist=[] 
	###XML Parsing from root: start
	parser = etree.XMLParser(remove_blank_text=True)
	pathvar=path
	tree = etree.ElementTree()
	tree =etree.parse(pathvar,parser)
	root = tree.getroot()
	###XML Parsing from root: end
	
	for var in tree.xpath("NODE/COMPARISON/VARIANTS/VARIANT"):

		#print var

		homop = var.findall('HOMOPLASY')[0]
		
		if(homop.text == "Yes" and not withHomoplasy):
			pass

		for nps in var.xpath("REGION/TRANSCRIT"):

			#print 	nps.text

		#for nps in tree.xpath("NODE/COMPARISON/VARIANTS/VARIANT/REGION/TRANSCRIT"):

			#For the elements contained between "TRANSCRIT" markups, catch (em all!) and store them in nplist[]:
			nplist.append(nps.text)
			nb+=1
			sys.stdout.write("\r{0} <TRANSCRIPT> fields passed".format(nb))

	print "\n--> ok: processed in",int(time.time()-t0),"seconds"

	return nplist


#######################################################################################################################
#NP TO UNIPROT ID MAPPING FROM TRANSCRIT IDS LIST######################################################################
#######################################################################################################################


def idmapping(nplist,dicoNP,NPfile): # ID mapping from NP LIST (not from XML, bcs its easier and faster!) online or offline 
	"""
	Make ID mapping from NP identifiers to Uniprot identifiers requesting Online(Uniprot database) of Offline(NP-EBI_databases.tsv)
	@param nplist : list used in ONLINE request --> values = NP identifiers 
	@type nplist: list
	@param dicoNP : dictionnary used in OFFLINE request --> keys = NP identifiers , values = uniprot id retrieved
	@type dicoNP: dictionnary
	@param NPfile : Storage of uniprot identifiers to NP identifiers (NP-EBI_databases.tsv)
	@type NPfile: string
	@return: list of Uniprot identifiers
	@rtype: list
	"""
	
	print "\nID MAPPING..."

	#counter
	t0=time.time()
	nb2=0
	#/counter

	#Dublicate protlist variable (protlist=nplist=list of np values)
	protlist=nplist

	#print nplist

	#DicoNP store every NP to Uniprot ids
	for np in range(len(nplist)):
		#print np
		#For every NP in list, if they exists in DicoNP (from local file), store them in protlist 
		if nplist[np] in dicoNP and "P_" in nplist[np] and nplist[np]!='':

			protlist[np]=dicoNP[nplist[np]] 
			#---> now: protlist= list of uniprot ids values

		#Else, retrieve NP to Uniprot ids online
		else:
			# Page: useful in order to verify if the online request was sucessfull;
			#if page!=None : request completed. 
			page=None

			#print nplist[np]

			if "P_" in nplist[np]:

				while page==None: #While request is not completed, retry.

					try :


						#RETRIEVE UNIPROT ID FROM NP ID
						#Custom url in order to retrieve Uniprot ids from NP ids
						url = 'http://www.uniprot.org/uniprot/?query='+str(nplist[np])+',&columns=id&format=list'
						#Request as user-agent "Python"
						request = urllib2.Request(url)
						request.add_header('User-Agent', 'Python %s')
						response = urllib2.urlopen(request)
						#response=page=ID uniprot
						page = response.read()

						#STORE the new NP to Uniprot Id in local NP-EBI-databases.tsv if not already exists
						f = open(NPfile,'a+')
						if (len(str(page))>0) :
							#print "init:" + page
							page = page.split('\n')[0] + '\n'
							#print "final:" + page #### AAAAAAAAAAAAAAAAAAAAAAAAAAA
							if page not in f.readlines(): #Fix 05.08.16
								f.write(str(nplist[np]) + '\t' + str(page))
						f.close()

						##ADD this new NP to UNiprot id in dicoNP in order to retrieve offline immediattly (id may be in next requests)
						dicoNP[str(nplist[np])]=page
						protlist[np]=page



					except urllib2.URLError: #Retry in case of timeout

						print "\nRe-trying..."
						time.sleep(5)
						pass	
			else:

				protlist[np]="unverified" # tag as unverified if id is not a NP id

		nb2+=1
		sys.stdout.write("\r{0} ID's mapped".format(nb2))

	#print "\n--> ok: processed in",int(time.time()-t0),"seconds"

	return protlist


#######################################################################################################################
#UNIPROT TO GO ID MAPPING FROM TRANSCRIT IDS LIST --> AND XML OUTPUT WITH GO-INFORMATIONS ADDED########################
#######################################################################################################################


def UNIPROTtoGO(path,output,protlist,dicoGO,GOFile,GO_prok): #Uniprot to GO ids mapping and XML edition with GO-finformations add between <TRANSCRIPT> markups
	"""
	Make ID mapping from Uniprot identifiers to GO identifiers requesting Online(Quick-GO database) of Offline(EBI-GO_databases.tsv)
	@param path : relative path to the XML file
	@type path: string
	@param output: Universe of GO identifiers (univers.txt)
	@type output: string
	@param protlist: list used in ONLINE request --> values = UNIPROT identifiers 
	@type protlist: list
	@param dicoGO : dictionnary used in ONLINE requests --> keys = Uniprot identifiers , values = GO identifiers list
	@type dicoGO: dictionnary
	@param GOFile: Storage of uniprot identifiers to GO identifiers (EBI-GO_databases.tsv)
	@type GOFile: string
	"""

	print "\nGO TERMS RETRIEVING..."
	#counter initialisation
	t0=time.time()
	nb3=0
	tsvname="annotation"+str(uuid.uuid4())+".tsv"
	#/counter initialisation
	filename=str(output) #filename: name of XML output that will contain GO-informations
	outputFile = open(filename, "w") #see above

	i=0 #control uniprot ids list reading

	###XML Parsing from root: start
	parser = etree.XMLParser(remove_blank_text=True)
	pathvar=path
	tree = etree.ElementTree()
	tree =etree.parse(pathvar,parser)
	root = tree.getroot()
	regions = root.findall("NODE/COMPARISON/VARIANTS/VARIANT/REGION") #Find all informations contained between <REGION> markups
	###XML Parsing from root: end
	#EBI-GO_prok:full list of proka GO-terms
	with open(GO_prok) as termsprok:
		termsproklist=[]
		for term in termsprok:
			termsproklist.append(term)

	# Every information contained between <REGION> markups potentially contains a TRANSCRIPT ID,so:
	#For every <REGION> fields of this XML,search a TRANSCRIPT ID and if TRANSCRIPT ID FIND, do GO-retrieving from protlist (uniprot ids list variable)
	for region in regions: 

		#if (while) list not of out range, control if its a transcript id 
		if i<len(protlist):

			regionvalue=str(ET.tostring(region).rstrip('\n'))

			if len(str(regionvalue))>30: #if len(regionvalue)<30, its intergenic and not interesting for GOterms : do not search more
										 #if len(regionvalue)>30, its intragenic --> continue to search informations 

				if protlist[i]!='' and protlist[i]!="unverified": #if there is a Uniprot_id in protlist[i] != unverified ,its a Uniprot id, so,search for GO-terms

					dicogo={} #dicogo: temporary dictionnary in order to control and avoid GO duplicates for a same Uniprot-id during GO-term retrieving
						   # !=dicoGO: dictionnary which stores Uniprot to GO ids.

					#Create <GOLIST></GOLIST> markups
					golist=etree.Element("GOLIST")
					#AND FOR EVERY GO : retrive GO-id, GO-aspect, GO-description
					#AND store them in XML file

					#if Id in dicoGO-->id in GO-EBI_databases.tsv--> retrieve offline and add to XML
					if protlist[i] in dicoGO:

						for term in dicoGO[protlist[i]]:
							#Markups initialisation :start
							go=etree.SubElement(golist,"GO")
							goID=etree.SubElement(go,"ID")
							goDOMAIN=etree.SubElement(go,"DOMAIN")
							goDESCRIPTION=etree.SubElement(go,"DESCRIPTION")
							#Markups initialisation :end
							#term=term.split()#term=GO id + GO domain + GO description(format DESCRIPTION_word1 DESCRIPTION_word2 DESCRIPTION_wordn..)
							#split by "|"" in order to recognize these 3 categories
							#interm=str(term[0:]).split('|') 
							interm=term.split('|')
							#Some magic in order to have a clean ouput: start
							goID.text=str(interm[0]).replace("['","")
							#print goID.text
							

							if len(interm)>1 :

								goDOMAIN.text=str(interm[1]).rstrip('\n')
								if "Component" in goDOMAIN.text:	# GO domain
									goDOMAIN.text="Cellular Component"
								elif "Function" in goDOMAIN.text:
									goDOMAIN.text="Molecular Function"
								elif "Process" in goDOMAIN.text:
									goDOMAIN.text="Biological Process"
								goDESCRIPTION.text=str(' '.join(interm[2:])).rstrip("']'")
								goDESCRIPTION.text=str(goDESCRIPTION.text).replace("'","")
								goDESCRIPTION.text=str(goDESCRIPTION.text).replace(",","")
								#Some magic in order to have a clean ouput: end
								for term in termsproklist:
									if goID.text in term: #if goID is proka term
										# INSERT the new informations in a duplicate XML at deepness lvl=3 in regard to <region>
										region.insert(4,golist) 
										del term #clear term from RAM

							else:
								#print term			


					#Else, if id exists and not and dicoGO 		
					elif(protlist[i] !=''):

						goterm=None #Same process than variable "Page" in idmapping function

						while goterm==None:

							try:

								urllib.urlretrieve('http://www.ebi.ac.uk/QuickGO/GAnnotation?protein='+str(protlist[i])+'&col=goID,aspect,goName&format=tsv',tsvname)

								#retrieve .tsv file which contains GO IDs for this Uniprot ID
								with open(tsvname,'r') as sourcetmp:

									lignestmp=sourcetmp.readlines()

									for goterm in lignestmp:

										#split format: GOid_GOaspect_GOdescription
										goterm=goterm.split() 
										
										if goterm[0] not in dicogo.keys() and goterm[0]!="GO": #avoid GOterms clones (for a same positon) and wrong values										
											#Markups initialisation :start
											go=etree.SubElement(golist,"GO")
											goID=etree.SubElement(go,"ID")
											goDOMAIN=etree.SubElement(go,"DOMAIN")
											goDESCRIPTION=etree.SubElement(go,"DESCRIPTION")
											#Markups initialisation :end

											#output formating: start
											goID.text=str(goterm[0]).rstrip('\n') 			 #GO id

											if "Component" in str(goterm[1]).rstrip('\n'):	# GO domain
												goDOMAIN.text="Cellular Component"
											elif "Function" in str(goterm[1]).rstrip('\n'):
												goDOMAIN.text="Molecular Function"
											elif "Process" in str(goterm[1]).rstrip('\n'):
												goDOMAIN.text="Biological Process"

											goDESCRIPTION.text=str(' '.join(goterm[2:])) 	#GO description (Join all words)
											#output formating: end

											#ADD PROKA TERMS ONLY IN XML
											for term in termsproklist:
												if goID.text in term: #if goID is proka term
													region.insert(4,golist) # write at a deepness value of 3 in regard to <region>
													#go3in1 format GOid | GO_aspect | GO_description(n) --> this is the GO-EBI_databases.tsv format
													go3in1=str(goterm[0]) +'|' + str(goterm[1]) +'|'+ str(' '.join(goterm[2:]))
												
													#if goterm exists, store in dicogo in order to control duplicates for next go-terms IN THIS CURRENT TSV FILE 
													if goterm[0]!='':
														dicogo[go3in1]=protlist[i]	
												del term #clear term from RAM

								#clear previous value (Uniprot ID) if no associated GO term for this key (useful for next step)
								dicoGO[protlist[i]] = []


								for goterms in dicogo.keys():
									#append GO-terms to dicoGO in order to retrieve offline immediatly (nexts requests can be duplicates of this actual request)
									dicoGO[protlist[i]].append(str(goterms))
			
								#save results in EBI-GO_databases.tsv
								f = open(GOFile,'a+')

								if protlist[i] not in f.readlines():  #fix 05.05.16	
									f.write(protlist[i] + '\t' +  ';'.join(dicoGO[protlist[i]]) + '\n')		
									f.close()		

							#In case of error (usually error403),retry the request after 5 seconds
							except urllib2.URLError:

								print "\nRe-trying..."
								time.sleep(5)
								pass	

				#counter
				nb3+=1
				sys.stdout.write("\r{0} <TRANSCRIPT> fields processed".format(nb3))
				#/counter		
				i+=1 

	#After all XML ebuilding, write the new XML in output file
	print "\nWriting new XML"		
	#REMARQUE: l'écriture du nouveau XML requiert en RAM beaucoup plus que sa taille finale
	outputFile.write(etree.tostring(root,pretty_print=True))
	outputFile.close()	
	if os.path.exists(tsvname):
		os.system('rm '+str(tsvname))
	print "--> ok: processed in ",int(time.time()-t0)," seconds"		


#######################################################################################################################
#MAIN##################################################################################################################
#######################################################################################################################

def main():	


	#################counter initialisation ########################
	t1=time.time()
	##################### get parser ###############################
	parser=get_parser()

	######## Print parser help if arguments missed #################
	if len(sys.argv)==1:
		parser.print_help()
		sys.exit(1)
	

	########### Manage workflow accorded to Args  ##################
	Arguments=parser.parse_args()

	#################### Create GO-slim file #######################
	os.system("GOslimmer_xml -i " + Arguments.obo + " -o " + Arguments.GoProkk)

	nplist=extractNP(Arguments.input, Arguments.withHomoplasy)

	#if NP correspondence file already exists manage it, else write it
	if Arguments.NPdatabases :
		dicoNP = readDBFile(Arguments.NPdatabases)
		protlist=idmapping(nplist,dicoNP,Arguments.NPdatabases)
	
	else :
		dicoNP = {}
		Arguments.NPdatabases = "NP-EBI_databases.tsv"
		f = open("NP-EBI_databases.tsv",'w')
		dicoNP=readDBFile(Arguments.NPdatabases)
		f.close()
		#and start id mapping with the correct arguments
		protlist=idmapping(nplist,dicoNP,Arguments.NPdatabases)

	#if GO correspondence file already exists manage it, else write it
	if Arguments.GOdatabases :
		dicoGO = readDBGOFile(Arguments.GOdatabases)
		#and start GO retrieving with the correct arguments
		UNIPROTtoGO(Arguments.input,Arguments.output,protlist,dicoGO,Arguments.GOdatabases, Arguments.GoProkk)
	
	else :
		dicoGO = {}
		Arguments.GOdatabases = "EBI-GO_databases.tsv"
		f = open("EBI-GO_databases.tsv",'w')
		dicoGO = readDBGOFile(Arguments.GOdatabases)
		f.close()	
		#and start GO retrieving with the correct arguments
		UNIPROTtoGO(Arguments.input,Arguments.output,protlist,dicoGO,Arguments.GOdatabases, Arguments.GoProkk)

	#Show counter results
	print "\n====================================================================\nSCRIPT FINISHED IN ",int((time.time()-t1)),"SECONDS"
	print"===================================================================="


#############################################################################
#Do not execute the script if it was imported as a module!
if __name__ == "__main__":													
	main()												
#############################################################################
