#!/usr/bin/python
# -*- coding: iso-8859-1 -*-
import os, sys, time
import argparse
from subprocess import Popen, list2cmdline

__doc__="""
Do the InDel calling from BAM files.
This script was designed for the VARCall workflow.

@requires: GATK
"""

def get_parser():
	"""
	Parse arguments
	@return: arguments list
	@rtype: parser object
	"""

	parser = argparse.ArgumentParser(description='Do the InDel calling from BAM files')

	parser.add_argument('-ref', action="store", dest='refFASTA', 
						type=str, required=True, help='reference genome in FASTA (REQUIRED)')

	parser.add_argument('-b', action="store", dest='BAM', 
						type=str, required=True, nargs='+', help='bam files (REQUIRED)')

	parser.add_argument('-o', action="store", dest='output', 
						type=str, default='output', help='output name (default:output)')

	parser.add_argument('-m', action="store", dest='maxMemory', 
						type=int, default='4000', help='max memory to use in Mb (default:4000)')

	parser.add_argument('-GATKJAR', action="store", dest='GATKJAR', 
						type=str, default='/opt/GATK/3.4.0/GenomeAnalysisTK.jar', help='GenomeAnalysisTK jar path')  #required=True

	parser.add_argument('-s', action="store", dest='stand_call_conf', 
						type=str, default='50', help='stand_call_conf parameter for GATK UnifiedGenotyper (default:50)')

	parser.add_argument('-T', action="store", dest='nbThreads', 
						type=int, default='1', help='maximum number of threads to use (default:1)')

	parser.add_argument('--removeTmpFiles', dest='removeTmpFiles', action='store_true', help='remove temporary files (default:False)', default=False)

	return parser


def exec_commands(cmds, nbThreads):
    """
    Exec commands in parallel in multiple process (as much as we have CPU)
    @param cmds: list of commands
	@type cmds: list
	@param nbThreads: number of threads to use
	@type nbThreads: integer
    """
    if not cmds: return # empty list

    def done(p):
        return p.poll() is not None
    def success(p):
        return p.returncode == 0
    def fail():
        sys.exit(1)

    max_task = nbThreads
    processes = []
    while True:
        while cmds and len(processes) < max_task:
            task = cmds.pop()
            #print list2cmdline(task)
            processes.append(Popen(task))

        for p in processes:
            if done(p):
                if success(p):
                    processes.remove(p)
                else:
                    fail()

        if not processes and not cmds:
            break
        else:
            time.sleep(0.05)	



#main function	
def main():

	##################### gets arguments #####################
	parser=get_parser()
	
	#print parser.help if no arguments
	if len(sys.argv)==1:
		parser.print_help()
		sys.exit(1)
	
	Arguments=parser.parse_args()

	if Arguments.maxMemory >= 4000 :
		Xmx = "-Xmx4g"
	else :
		Xmx = "-Xmx2g"	


	#variant calling
	print "--> InDel calling indel...\n"
	cmds = []

	cmds.append(["java",Xmx, "-jar", Arguments.GATKJAR, \
		"-R", Arguments.refFASTA, \
		"-T", "UnifiedGenotyper", \
		"-o", Arguments.output + "_InDel_raw.vcf", "-ndrs", \
		"-stand_call_conf", Arguments.stand_call_conf, \
		"-stand_emit_conf", "10", \
		"-glm", "INDEL", \
		"-minIndelCnt", "5", \
		"-baq", "OFF", \
		"-dcov", "200", \
		"--sample_ploidy", "1"\
		, "-nt ", str(Arguments.nbThreads)\
		])

	for bamFile in Arguments.BAM :
		cmds[0].append("-I")
		cmds[0].append(bamFile)

	exec_commands(cmds, 1)
	
	print "\n--> InDel calling finish!\n"	


	#variant filtration
	print "--> InDel filtration...\n"
	cmds = []

	cmds.append(["java",Xmx, "-jar", Arguments.GATKJAR, \
		"-R", Arguments.refFASTA, \
		"-T", "VariantFiltration", "-ndrs", \
		"-o", Arguments.output + "_InDel_flag.vcf", \
		"--variant", Arguments.output + "_InDel_raw.vcf", \
		"--filterExpression", "\"QUAL<30.0\"", \
		"--filterName", "\"LowQual\"", \
		"--filterExpression", "\"SB>=-1.0\"", \
		"--filterName", "\"StrandBias\"",  \
		"--filterExpression", "\"QD<1.0\"", \
		"--filterName", "\"LowQD\"", \
		"--filterExpression", "\"MQ0 >= 4 && ((MQ0 / (1.0 * DP)) > 0.1)\"", \
		"--filterName", "\"QualByDepth\"", \
		"--filterExpression", "\"HRun>=15\"", \
		"--filterName", "\"HomopolymerRun\"", \
		"--filterExpression", "\"AF == 1.0\"", \
		"--filterName", "\"Invariant_across_samples\""\
		])	

	#exec_commands(cmds, 1)
	#print " ".join(commands)

	os.system(" ".join(cmds[0])) #ne passe pas sinon
	
	print "\n--> InDel filtration finish!\n"	


	print "--> hard filtering...\n"
	cmds = []

	cmds.append(["java",Xmx, "-jar", Arguments.GATKJAR, \
		"-R", Arguments.refFASTA, \
		"-T", "SelectVariants", "-ndrs", \
		"--variant", Arguments.output + "_InDel_flag.vcf", \
		"-o", Arguments.output + "_InDel_filtrated.vcf", \
		"-env", \
		"-ef"\
		, "-nt ", str(Arguments.nbThreads)\
		])

	exec_commands(cmds, 1)
		
	print "\n--> hard filtering finish!\n"


	#variants metrics

	cmds.append(["java",Xmx, "-jar", Arguments.GATKJAR, \
		"-T", "VariantEval", "-ndrs", \
		"-R", Arguments.refFASTA, \
		"-o", Arguments.output + "_InDel_filtrated.txt", \
		"--eval", Arguments.output + "_InDel_filtrated.vcf"\
		, "-nt ", str(Arguments.nbThreads)\
		])

	exec_commands(cmds, 1)


	print "\n--> InDel selection finish!\n"	


	if Arguments.removeTmpFiles:

		cmds = ["rm", Arguments.output + "*_raw.vcf*", Arguments.output + "*_flag.vcf*"]
		os.system(" ".join(cmds))




if __name__ == "__main__":
	main()	            	